
# Form implementation generated from reading ui file 'display.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import socket

import time
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QCoreApplication
# from bluetooth import Protocols
import bluetooth
import sys
from time import sleep
from PyQt6.QtWidgets import QApplication, QMainWindow

from PyQt6.QtCore import QObject, QThread, pyqtSignal
import display

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(str)

    def run(self):
        """Long-running task."""
        print("Đang tìm kiếm các thiết bị Bluetooth xung quanh...")
        nearby_devices = bluetooth.discover_devices(duration=8, lookup_names=True, flush_cache=True)
        print("Các thiết bị Bluetooth xung quanh:")
        for addr, name in nearby_devices:
            # self.device_list.addItem(f"{addr} - {name}")
            self.progress.emit(f"{addr} - {name}")
            print(f"{addr} - {name}")
        self.finished.emit()
    def connect(self,id):
        option = id
        device_address = option[:17]
        port = 1  # RFCOMM port number
        # try:
        print(f"Đang kết nối đến thiết bị có địa chỉ {device_address}...")
        sock = bluetooth.BluetoothSocket(socket.BTPROTO_RFCOMM)
        sock.connect((device_address, port))
        while(1):
            pass
        self.finished.emit()
        # except Exception as e:
        #     print("Kết nối thất bại")
        #     return None

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.uic = display.Ui_MainWindow()
        self.uic.setupUi(self)
        self.thread = {}
        self.uic.connect_button.clicked.connect(self.connect)
        self.uic.cancel_button.clicked.connect(self.cancel_connection)
        self.uic.device_list.setPlaceholderText( "Danh sách thiết bị Bluetooth")
        self.uic.device_list.activated.connect(self.device_list_select)
        self.uic.cancel_button.setStyleSheet("background-color: #66CDAA; color: white;")
        
        self.uic.device_list.setDisabled(1)
        self.uic.accept_button.setDisabled(1)
        self.uic.deny_button.setDisabled(1)
    def device_list_select(self):
        option = self.uic.device_list.currentText()
        device_address = option[:17]
        self.thread[2] = ThreadClass(index=1,mac_id=device_address)
        self.thread[2].start()
        self.thread[2].signal.connect(self.my_function)
        self.thread[2].connect_status.connect(self.status_change)
    def my_function(self, msg):
        i = self.uic.MainWindow.sender().index
        self.uic.image_label.setText(msg)

    def cancel_connection(self):
        self.thread[2].stop()
        self.uic.connect_button.setMaximumWidth(9999999)
        self.uic.cancel_button.setMaximumWidth(0)

    def status_change(self,status):
        if status==1:
            self.uic.connect_button.setMaximumWidth(0)
            self.uic.cancel_button.setMaximumWidth(9999999)
        if status==0:
            self.uic.connect_button.setMaximumWidth(9999999)
            self.uic.cancel_button.setMaximumWidth(0)
        if status==3:
            self.uic.connect_button.setStyleSheet("background-color: #f7917c; color: white;")
            self.uic.connect_button.setText("Kết nối thất bại! Nhấn kết nối lại!")
        if status==4:
            self.uic.connect_button.setStyleSheet("background-color: #f7f57c; color: black;")
            self.uic.connect_button.setText("Đang kết nối tới thiết bị")
        # self.thread[2].connect_status.emit(3)
        print("eeee")

        pass

    def reportProgress(self, n):
        self.uic.device_list.addItem(n)

    def connect(self):
        # Thiết lập màu của nút thành màu xanh
        self.uic.connect_button.setStyleSheet("background-color: #f7f57c; color: black;")
        self.uic.connect_button.setText("Đang quét thiết bị xung quanh...")
        QCoreApplication.processEvents()  # Cập nhật giao diện người dùng
        self.uic.device_list.clear() 

        # Step 2: Create a QThread object
        self.thread[1] = QThread()
        # Step 3: Create a worker object
        self.worker = Worker()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread[1])
        # Step 5: Connect signals and slots
        self.thread[1].started.connect(self.worker.run)
        self.worker.finished.connect(self.thread[1].quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread[1].finished.connect(self.thread[1].deleteLater)
        self.worker.progress.connect(self.reportProgress)
        # Step 6: Start the thread
        self.thread[1].start()

        # Final resets
        self.uic.connect_button.setEnabled(False)
        self.thread[1].finished.connect(
            lambda: self.uic.connect_button.setEnabled(True)
        )
        self.thread[1].finished.connect(
            lambda: self.uic.connect_button.setStyleSheet("background-color: #6495ED; color: white;")
        )
        self.thread[1].finished.connect(
            lambda: self.uic.connect_button.setText("Đã bật Bluetooth! Nhấn để quét Bluetooth lại!")
        )
        self.thread[1].finished.connect(
            lambda:  self.uic.device_list.setDisabled(0)
        )
        # Sau khi tìm thấy các thiết bị, cập nhật lại màu của nút thành màu xanh lá cây
        



class ThreadClass(QtCore.QThread):
    signal = pyqtSignal(str)
    connect_status = pyqtSignal(int)

    def __init__(self, index=0, mac_id = ""):
        super().__init__()
        self.index = index
        self.mac_id = mac_id

    def run(self):
        self.connect_status.emit(4)
        print('Starting thread...', self.index,self.mac_id)
        counter = 0
            
        try:
            client = socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)
            client.connect((self.mac_id, 4))

            print(f"Connected!")

            self.connect_status.emit(1)
            while True:
                message = input("Enter message: ")
                client.send(message.encode('utf-8'))
                data = client.recv(1024)
                if not data:
                    break
                print(f"Received: {data.decode('utf-8')}")
                print(self.connect_status)
                self.signal.emit(f"{data.decode('utf-8')}")

        except OSError:
            self.connect_status.emit(3)
            pass

        print("Disconnected")
        self.connect_status.emit(0)

        client.close()

    def stop(self):
        print('Stopping thread...', self.index)
        self.connect_status.emit(0)
        self.terminate()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w = QtWidgets.QMainWindow()
    ui = MainWindow()
    ui.show()
    sys.exit(app.exec())